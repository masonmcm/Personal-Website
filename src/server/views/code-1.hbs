<div class="container code-container">
    <div class="centered-container">
        <h2>Scheme Sort</h2>
            <p>I was a sophomore in winter break of 2017, I had been a computer science major for just shy of a year, but I was still hesitant about delving into the field fully. 
                This changed when I joined a book club among my coworkers where we read “The Little Schemer”. Scheme is a “dialect” of the Lisp programming language that was birthed 
                in the 1970’s. Not only was it was my first experience with a functional programming language, but I had never before used a language that negated any sort of looping mechanism. 
                As a third-semester CS student, I had finished an intro class on data structures. The importance of recursion had only just been impressed on me. It’s basically a horribly inefficient version of insertion sort.
        </p>

        <pre><p class="code-snippet">
; remove n from tup 

(define numberrember
    (lambda (n tup)
        (cond
        ((null? tup) (quote ()))
        ((eq? (car tup) n) (cdr tup))
        (else (cons (car tup) (numberrember n (cdr tup)))))))
                    
; return the smallest element in a tup
    
(define smallest
    (lambda (tup)
        (cond
        ((eq? (cdr tup) (quote())) (car tup) )
        ((< (car tup) (car (cdr tup))) 
            (smallest (numberrember (car (cdr tup)) tup)))
        (else (smallest (cdr tup))))))

; sort tup

(define sort
    (lambda (tup)
        (cond
            ((null? tup) (quote ()))
                (else (cons (smallest tup) 
                (sort( numberrember (smallest tup) tup)))))))
                 </p></pre>
    <div class="code-arrow-container">
        <a class="white-arrow" href="code"><img src="images/svg/white-arrow.svg"></a>
    </div>
</div>
</div>